<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Personal Blog</title>
    <link>https://canavandl.github.io/</link>
    <description>Recent content on Personal Blog</description>
    <generator>Hugo - gohugo.io</generator>
    <language>en</language>
    <contact>canavandl@gmail.com</contact>
    <copyright></copyright>
    
        <atom:link href="https://canavandl.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PyData DC 2018: Developing Dashboard Applications using Bokeh</title>
      <link>https://canavandl.github.io/slides/pydata_dc_2018/</link>
      <pubDate>Sun, 18 Nov 2018 00:00:00 -0600</pubDate>
      <author>Luke Canavan</author>
      <guid>https://canavandl.github.io/slides/pydata_dc_2018/</guid>
      <description></description>
      
      <content>&lt;section data-markdown&gt;
    &lt;textarea data-template&gt;
        ## Developing Dashboard Applications with Bokeh

        &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/bokeh_logo.svg&#34; width=&#34;100&#34; height=&#34;100&#34; style=&#34;background:none; border:none; box-shadow:none;&#34;/&gt;

        *Luke Canavan*
    &lt;/textarea&gt;
&lt;/section&gt;
&lt;section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Bokeh seeks to connect PyData tools and users to web-based, interactive visualization

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/kepler.gif&#34;&gt;
            [KeplerGO/lightkurve](https://github.com/KeplerGO/lightkurve)
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Community of Users

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/user_examples.png&#34;&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Bokeh 1.0 Announcement

            Features include:
            * Highly customizable plotting primitives
            * Interactive plot tools (pan, hover, zoom, etc)
            * HTML Widgets (sliders, dropdowns, etc)
            * Native support for network graphs and geo data
            * Jupyter Notebook, Jupyter Lab, Zeppelin support
            * JS and Python callbacks on data changes and events
            * And much more
        &lt;/textarea&gt;
    &lt;/section&gt;
&lt;/section&gt;
&lt;section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Outline

            * Building visualizations from primitives
            * Styling using Palettes and Themes
            * Layouts with bokeh.layouts and custom templates
            * Running as a server application
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Goal

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/screenshot.png&#34; height=481 width=830/&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
&lt;/section&gt;
&lt;section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Building visualizations from primitives
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Pick what graphical primitives to use, provide the data, and specify how to
            map visual properties to data fields. 
            
            Bokeh will take care of the rest.
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Building Blocks

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/bokeh_models.svg&#34; height=200 width=1000/&gt;

            ```
            &gt;&gt;&gt; from bokeh.models import Circle
            &gt;&gt;&gt; circle = Circle(x=5, y=10, fill_color=&#34;red&#34;)
            &gt;&gt;&gt; circle.to_json(include_defaults=False)
            {
                &#39;id&#39;: &#39;1002&#39;,
                &#39;x&#39;: {&#39;value&#39;: 5},
                &#39;y&#39;: {&#39;value&#39;: 10},
                &#39;fill_color&#39;: {&#39;value&#39;: &#39;red&#39;}
            }
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Write data driven visualizations

            ```
            &gt;&gt;&gt; from bokeh.models import ColumnDataSource
            &gt;&gt;&gt; data = {
                    &#34;time&#34;: [...],
                    &#34;value&#34;: [...],
                    &#34;color&#34;: [...]}

            ### From Dict[str, list]
            &gt;&gt;&gt; source = ColumnDataSource(data)

            ### From Pandas DataFrame
            &gt;&gt;&gt; df = pd.DataFrame(data)
            &gt;&gt;&gt; source = ColumnDataSource(df)
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Map visual properties to data fields

            ```
            &gt;&gt;&gt; source = ColumnDataSource(...)

            ### Using bokeh.models API
            &gt;&gt;&gt; plot.add_glyph(
                    source,
                    Circle(x=&#39;time&#39;, y=&#39;value&#39;, fill_color=&#39;color&#39;))

            ### Using bokeh.plotting API
            &gt;&gt;&gt; plot.circle(
                    x=&#39;time&#39;, y=&#39;value&#39;, fill_color=&#39;color&#39;, source=source)
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            To Reiterate:

            Pick what graphical primitives to use, provide the data, and specify how to
            map visual properties to data fields. 
            
            Bokeh will take care of the rest.

            More reading at [Enjoying the bokeh.models API](https://bokeh.github.io/blog/2017/7/5/idiomatic_bokeh/)
        &lt;/textarea&gt;
    &lt;/section&gt;
&lt;/section&gt;
&lt;section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Styling using Palettes and Themes
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Bokeh offers many aesthetically pleasing color palettes including the Brewer
            and D3 palettes.

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/d3_palette.png&#34; width=&#34;692&#34; height=&#34;400&#34; /&gt;

            [Made with Holoviews](http://holoviews.org/gallery/demos/bokeh/autompg_violins.html#bokeh-gallery-autompg-violins)
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Bokeh also offers perceptually uniform color palettes to allow users to map data
            to color ranges.

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/fire_palette.png&#34; width=&#34;500&#34; height=&#34;400&#34; /&gt;

            [Made with Datashader](http://datashader.org/getting_started/1_Introduction.html)
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Themes are great for maintaining consistent style across several plots

            ```
            attrs:
                Axis:
                    axis_line_color: &#34;#49483E&#34;
                    axis_label_text_color: &#34;#888888&#34;
                    major_label_text_color: &#34;#888888&#34;
                    major_tick_line_color: &#34;#49483E&#34;
                    minor_tick_line_color: null
                    axis_label_standoff: 10
                Plot:
                    background_fill_color: &#34;#282828&#34;
                    border_fill_color: &#34;#282828&#34;
                    outline_line_color: &#34;#49483E&#34;
                    outline_line_alpha: 0.25

            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Community-created Themes
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;th&gt;
                        &lt;p&gt;Caliber&lt;/p&gt;
                        &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/caliber.png&#34; width=&#34;325&#34; height=&#34;187&#34;/&gt;
                    &lt;/th&gt;
                    &lt;th&gt;
                        &lt;p&gt;Monokai Dark&lt;/p&gt;
                        &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/monokai.png&#34; width=&#34;325&#34; height=&#34;187&#34;/&gt;
                    &lt;/th&gt;
                    &lt;th&gt;
                        &lt;p&gt;Minimal Dark&lt;/p&gt;
                        &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/dark.png&#34; width=&#34;325&#34; height=&#34;187&#34;/&gt;
                    &lt;/th&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
            More reading at [Styling Bokeh Visualizations](https://bokeh.github.io/blog/2017/7/24/styling-bokeh/)
        &lt;/textarea&gt;
    &lt;/section&gt;
&lt;/section&gt;
&lt;section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Layouts with bokeh.layouts and custom templates
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Plots and Widgets can be responsive

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/responsive.gif&#34; width=&#34;461&#34;, height=&#34;444&#34;&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            The bokeh.layouts API offers a &#34;rows and columns&#34;-based layout interface

            ```
            from bokeh.layouts import layout

            page = layout([
                [bollinger],
                [sliders, plot],
                [p1, p2, p3],
                ], sizing_mode=&#39;stretch_both&#39;)

            show(page)
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            The bokeh.layouts API offers a &#34;rows and columns&#34;-based layout interface

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/layout.png&#34; width=&#34;534&#34;, height=&#34;424&#34;/&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Using custom templates

            Support for embedding plots into custom Jinja templates

            ```
                &lt;div class=&#34;col-lg-8&#34;&gt;
                    &lt;div class=&#34;my-2&#34;&gt;
                        {{ embed(roots.plot1) }}
                    &lt;/div&gt;
                    &lt;div class=&#34;my-2&#34;&gt;
                        {{ embed(roots.plot2) }}
                    &lt;/div&gt;
                &lt;/div&gt;
                {{ plot_script }}
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Bokeh + CSS Layout Models = Amazing Layouts

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/cssgrid.png&#34; style=&#34;background:white&#34;/&gt;

            [CSS Grid](https://css-tricks.com/snippets/css/complete-guide-grid/)
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Dask Distributed&#39;s diagnostic UI uses CSS Grid
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td&gt;
                        &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/dask_full.png&#34; width=&#34;682&#34;, height=&#34;373&#34;/&gt;
                    &lt;/td&gt;
                    &lt;td&gt;
                        &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/dask_half.png&#34; width=&#34;370&#34; , height=&#34;373&#34; /&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
            [Dask Examples](http://examples.dask.org/)
        &lt;/textarea&gt;
    &lt;/section&gt;
&lt;/section&gt;
&lt;section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Running as a Bokeh server application
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Bokeh Server keeps Python and JS models in sync.

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/bokeh_server.svg&#34; height=300 width=1000/&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Python callbacks can executed on property changes (and JS will react too)

            ```
            def update(attr, old, new):
                plot.title.text = new

            x = Select(title=&#39;X-Axis&#39;, value=&#39;mpg&#39;, options=columns)
            x.on_change(&#39;value&#39;, update)
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Streaming data source methods:

            ``.stream`` to append data incrementally to column ends
            ``.patch`` for random access updates anyway

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_dc_2018/ols.png&#34; height=370 width=470/&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Document-level Python callbacks are intended for server-driven updates
            like pushes and polling

            ```
            def stream_image():
                ...

                source.data[&#34;image&#34;] = [image]

            doc.add_periodic_callback(acquire_image, 100)
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Face Detection Example
        &lt;/textarea&gt;
    &lt;/section&gt;
&lt;/section&gt;
&lt;section data-markdown&gt;
    &lt;textarea data-template&gt;
        ### Resources:
        * **GitHub:** github.com/bokeh/bokeh
        * **Documentation:** bokeh.pydata.org
        * **Mailing list:** groups.google.com/a/continuum.io/forum/#!forum/bokeh
        * **Gitter Chat:** gitter.im/bokeh/bokeh
        * **#bokeh** tag on StackOverflow
    &lt;/textarea&gt;
&lt;/section&gt;
&lt;section data-markdown&gt;
    &lt;textarea data-template&gt;
        ### Thanks
    &lt;/textarea&gt;
&lt;/section&gt;
</content>
      
    </item>
    
    <item>
      <title>PyData NYC 2018: Developing Dashboard Applications using Bokeh</title>
      <link>https://canavandl.github.io/slides/pydata_nyc_2018/</link>
      <pubDate>Wed, 17 Oct 2018 00:00:00 -0500</pubDate>
      <author>Luke Canavan</author>
      <guid>https://canavandl.github.io/slides/pydata_nyc_2018/</guid>
      <description></description>
      
      <content>&lt;section data-markdown&gt;
    &lt;textarea data-template&gt;
        ## Developing Dashboard Applications with Bokeh

        &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/bokeh_logo.svg&#34; width=&#34;100&#34; height=&#34;100&#34; style=&#34;background:none; border:none; box-shadow:none;&#34;/&gt;

        *Luke Canavan*
    &lt;/textarea&gt;
&lt;/section&gt;
&lt;section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Bokeh seeks to connect PyData tools and users to web-based, interactive visualization

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/kepler.gif&#34;&gt;
            [KeplerGO/lightkurve](https://github.com/KeplerGO/lightkurve)
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Bokeh 1.0 Announcement

            Features include:
            * Highly customizable plotting primitives
            * Interactive plot tools (pan, hover, zoom, etc)
            * HTML Widgets (sliders, dropdowns, etc)
            * Native support for network graphs and geo data
            * Jupyter Notebook, Jupyter Lab, Zeppelin support
            * JS and Python callbacks on data changes and events
            * Bokeh Server
        &lt;/textarea&gt;
    &lt;/section&gt;
&lt;/section&gt;
&lt;section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Outline

            * Building visualizations from primitives
            * Layouts with bokeh.layouts and custom templates
            * Styling using Palettes and Themes
            * Running as a server application
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Goal

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/screenshot.png&#34; height=481 width=830/&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
&lt;/section&gt;
&lt;section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Building visualizations from primitives
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Pick what graphical primitives to use, provide the data, and specify how to
            map visual properties to data fields. Bokeh will take care of the rest.
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Bokeh / BokehJS Architecture
            &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/bokeh_models.svg&#34; height=200 width=1000/&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Using the bokeh.models API

            ```
            $ from bokeh.models import Circle

            $ circle = Circle(x=5, y=10, fill_color=&#34;red&#34;)

            $ circle.to_json(include_defaults=False)

            &gt; {
                &#34;angle&#34;: {
                    &#34;units&#34;: &#34;rad&#34;,
                    &#34;value&#34;: 0
                },
                &#34;fill_alpha&#34;: {
                    &#34;value&#34;: 1
                },
                &#34;fill_color&#34;: {
                    &#34;value&#34;: &#34;red&#34;
                },
                &#34;id&#34;: &#34;551a8ecc-1059-4478-9ddd-bac1e69f6c76&#34;,
                &#34;js_event_callbacks&#34;: {},
                &#34;js_property_callbacks&#34;: {},
                &#34;line_alpha&#34;: {
                    &#34;value&#34;: 1
                },
                &#34;line_cap&#34;: &#34;butt&#34;,
                &#34;line_color&#34;: {
                    &#34;value&#34;: &#34;black&#34;
                },
                &#34;line_dash&#34;: [],
                &#34;line_dash_offset&#34;: 0,
                &#34;line_join&#34;: &#34;bevel&#34;,
                &#34;line_width&#34;: {
                    &#34;value&#34;: 1
                },
                &#34;name&#34;: null,
                &#34;radius&#34;: null,
                &#34;radius_dimension&#34;: &#34;x&#34;,
                &#34;size&#34;: {
                    &#34;units&#34;: &#34;screen&#34;,
                    &#34;value&#34;: 4
                },
                &#34;subscribed_events&#34;: [],
                &#34;tags&#34;: [],
                &#34;x&#34;: {
                    &#34;value&#34;: 5
                },
                &#34;y&#34;: {
                    &#34;value&#34;: 7
                }
            }
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Write data driven visualizations

            ```
            $ from bokeh.models import ColumnDataSource

            $ data = {
                &#34;x&#34;: [...],
                &#34;y&#34;: [...],
                &#34;color&#34;: [...]}

            ### From Dict[str, list]

            $ source = ColumnDataSource(data)

            ### From Pandas DataFrame

            $ df = pd.DataFrame(data)
            $ source = ColumnDataSource(df)
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Map visual properties to data fields

            ```
            $ source = ColumnDataSource({
                &#34;x&#34;: [...],
                &#34;y&#34;: [...],
                &#34;color&#34;: [...]}

            $ plot.add_glyph(
                source,
                Circle(x=&#39;x&#39;, y=&#39;y&#39;, fill_color=&#39;color&#39;))
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            To Reiterate:

            Pick what graphical primitives to use, provide the data, and specify how to
            map visual properties to data fields. Bokeh will take care of the rest.

            More reading at [Enjoying the bokeh.models API](https://bokeh.github.io/blog/2017/7/5/idiomatic_bokeh/)
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Face Detection Example
        &lt;/textarea&gt;
    &lt;/section&gt;
&lt;/section&gt;
&lt;section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Layouts with bokeh.layouts and custom templates
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Plots and Widgets can be responsive

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/responsive.gif&#34; width=&#34;461&#34;, height=&#34;444&#34;&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            The bokeh.layouts API offers a &#34;rows and columns&#34;-based layout interface

            ```
            from bokeh.layouts import layouts

            l = layout([
                [bollinger],
                [sliders, plot],
                [p1, p2, p3],
                ], sizing_mode=&#39;stretch_both&#39;)
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Using bokeh.layouts

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/layout.png&#34; width=&#34;668&#34;, height=&#34;530&#34;/&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Using custom templates

            * Support for embedding roots into custom Jinja templates
            * New in Bokeh 0.13.0, you can individually lay out Document items...
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Bokeh + CSS Layout Models = Amazing Layouts

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/cssgrid.png&#34; style=&#34;background:white&#34;/&gt;

            [CSS Grid](https://css-tricks.com/snippets/css/complete-guide-grid/)
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Dask Distributed&#39;s diagnostic UI uses CSS Grid

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/dask_full.png&#34;/&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Dask Distributed&#39;s diagnostic UI uses CSS Grid

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/dask_half.png&#34; width=&#34;462&#34; , height=&#34;466&#34; /&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Face Detection Example
        &lt;/textarea&gt;
    &lt;/section&gt;
&lt;/section&gt;
&lt;section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Styling using Palettes and Themes
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Bokeh offers many aesthetically pleasing color palettes including the Brewer
            and D3 palettes.

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/d3_palette.png&#34; width=&#34;692&#34; height=&#34;400&#34; /&gt;

            [Made with Holoviews](http://holoviews.org/gallery/demos/bokeh/autompg_violins.html#bokeh-gallery-autompg-violins)
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Bokeh also offers perceptually uniform color palettes to allow users to map data
            to color ranges.

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/fire_palette.png&#34; width=&#34;500&#34; height=&#34;400&#34; /&gt;

            [Made with Datashader](http://datashader.org/getting_started/1_Introduction.html)
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Themes are great for maintaining consistent style across several plots

            ```
            attrs:
                Axis:
                    axis_line_color: &#34;#49483E&#34;
                    axis_label_text_color: &#34;#888888&#34;
                    major_label_text_color: &#34;#888888&#34;
                    major_tick_line_color: &#34;#49483E&#34;
                    minor_tick_line_color: &#34;#49483E&#34;
                Legend:
                    border_line_color: &#34;#49483E&#34;
                    background_fill_color: &#34;#282828&#34;
                    label_text_color: &#34;#888888&#34;
                Plot:
                    background_fill_color: &#34;#282828&#34;
                    border_fill_color: &#34;#282828&#34;
                    outline_line_color: &#34;#49483E&#34;
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Community-created Themes
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;th&gt;
                        &lt;p&gt;Caliber&lt;/p&gt;
                        &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/caliber.png&#34; width=&#34;325&#34; height=&#34;187&#34;/&gt;
                    &lt;/th&gt;
                    &lt;th&gt;
                        &lt;p&gt;Monokai Dark&lt;/p&gt;
                        &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/monokai.png&#34; width=&#34;325&#34; height=&#34;187&#34;/&gt;
                    &lt;/th&gt;
                    &lt;th&gt;
                        &lt;p&gt;Minimal Dark&lt;/p&gt;
                        &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/dark.png&#34; width=&#34;325&#34; height=&#34;187&#34;/&gt;
                    &lt;/th&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
&lt;/section&gt;
&lt;section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            ### Running as a Bokeh server application
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Bokeh Server keeps Python and JS models in sync.

            &lt;img src=&#34;https://canavandl.github.io/img/pydata_nyc_2018/bokeh_server.svg&#34; height=300 width=1000/&gt;
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Python callbacks can executed on property changes

            ```
            ...

            def update(attr, old, new):
                plot.title.text = new

            x = Select(title=&#39;X-Axis&#39;, value=&#39;mpg&#39;, options=columns)
            x.on_change(&#39;value&#39;, update)
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
    &lt;section data-markdown&gt;
        &lt;textarea data-template&gt;
            Document-level Python callbacks are intended for server-driven updates
            like pushes and polling

            ```
            def stream_image():
                ...

                source.data[&#34;image&#34;] = [image]

            doc.add_periodic_callback(acquire_image, 100)
            ```
        &lt;/textarea&gt;
    &lt;/section&gt;
&lt;/section&gt;
</content>
      
    </item>
    
  </channel>
</rss>